// Generator/client
generator client {
  provider = "prisma-client-js"
}

// Data source (PostgreSQL)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id              String        @id @default(cuid())
  steamId         String        @unique @map("steam_id")
  displayName     String        @map("display_name")
  avatarUrl       String?       @map("avatar_url")
  profileUrl      String        @map("profile_url")
  realName        String?       @map("real_name")
  country         String?
  state           String?
  city            String?
  friendsListAccess Boolean     @default(false) @map("friends_list_access")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  lastLoginAt     DateTime?     @map("last_login_at")

  // Relations
  friends     Friend[]
  matches     Match[]       @relation("MatchPlayers")
  matchQueue  MatchQueue?

  @@map("users")
}

// Friend Model
model Friend {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  steamId      String   @map("steam_id")
  displayName  String   @map("display_name")
  avatarUrl    String?  @map("avatar_url")
  profileUrl   String   @map("profile_url")
  friendSince  DateTime?@map("friend_since")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([userId, steamId])
  @@map("friends")
} 

enum MatchStatus {
  pending
  ready
  started
  finished
  cancelled
}

// Match Model
model Match {
  id        String    @id @default(cuid())
  players   User[]    @relation("MatchPlayers")
  accepted  String[]  @default([])
  declined  String[]  @default([])
  maps      String[]  @default([])
  vetoed    String[]  @default([])
  status    MatchStatus @default(pending)
  createdAt DateTime  @default(now())

  // Relation


  @@map("matches")
}

// MatchQueue Model
model MatchQueue {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique
  joinedAt DateTime @default(now())

  @@map("match_queue")
}

